#!/bin/bash
# rhv-manage-hosts v0.3 last mod 2017/04/12
# Latest version at <https://github.com/ryran/rhv-manage-hosts>
# Copyright 2017 Ryan Sawhill Aroha <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.

set -e

# Get version from line #2
version=$(sed '2q;d' ${0})

# The RHVM env variable should be FQDN of RHVM
# Default:
: ${RHVM:="rhvm.$(dnsdomainname)"}

# The RHVM admin user
# Default:
: ${RHVM_USER:="admin@internal"}

get_rhvm_user_password() {
	# Allow password env var or read from file (and quit if missing)
	[[ ${RHVM_USER_PASSWORD} ]] || RHVM_USER_PASSWORD=$(< ~/.rhvm.passwd) || print_help
}

# Validate optional integer variables used in loop_wait()
[[ ${sleep} =~ ^[0-9]+$ ]] || unset sleep
[[ ${maxcount} =~ ^[0-9]+$ ]] || unset maxcount

# Clear some globals
unset hostListCache daemonMode

i_am_rhvm() {
	i_am_not_a_host || [[ $(hostname) == ${RHVM} ]]
}

i_am_not_a_host() {
	if ! [[ ${hostListCache} ]]; then
		hostListCache=$(get_list hosts) || exit 1
	fi
	! grep -qs "^$(hostname)$" <<<"${hostListCache}"
}

rewrite_ovirtshell_cfg() {
	# I found that my ~/.ovirtshellrc was getting randomly truncated
	# ...by ovirt-shell, presumably. Re-writing it out takes care of that.
	cat > ~/.ovirtshellrc <<-EOF
		[cli]
		autoconnect = True
		autopage = False
		[ovirt-shell]
		username = ${RHVM_USER}
		renew_session = False
		timeout = None
		extended_prompt = False
		url = https://${RHVM}/ovirt-engine/api
		insecure = False
		kerberos = False
		filter = False
		session_timeout = None
		ca_file = $(echo ~/.rhvm.crt)
		dont_validate_cert_chain = False
		key_file = None
		password = ${RHVM_USER_PASSWORD}
		cert_file = None
	EOF
}

wait_for_api_server() {
	local cert="http://${RHVM}/ovirt-engine/services/pki-resource?resource=ca-certificate&format=X509-PEM-CA"
	echo -n "Waiting for RHVM API server ... "
	until curl -s ${cert} | openssl x509 &>/dev/null; do
		sleep 10
	done
	echo "✔ READY"
	curl -so ~/.rhvm.crt ${cert}
}

get_state() {
	local objtype=${1} name=${2} out
	if ! out=$(ovirt-shell -E "show ${objtype} ${name}" 2>/dev/null); then
		echo "Error querying RHVM for ${objtype} details! Aborting!" >&2
		return 1
	fi
	awk '/^status-state +: / {print $NF}' <<<"${out}"
}

get_list() {
	local objtype=${1} out
	echo "Getting list of ${objtype}" >&2
	if ! out=$(ovirt-shell -E "list ${objtype}" 2>/dev/null); then
		echo "Error querying RHVM for list of ${objtype}! Aborting!" >&2
		return 1
	fi
	awk '$1=="name" {print $3}' <<<"${out}"
}

quit_if_rhvm_pingcheck_fails() {
	if ! ping -c2 -W4 ${RHVM} &>/dev/null; then
		echo "RHVM not responding to pings; Aborting!" >&2
		[[ ${daemonMode} ]] && rguard -0
		exit 9
	fi
}

loop_wait() {
	local sleep=${sleep:-10} count=1 maxcount=${maxcount:-36}
	local objtype=${1} name=${2} desiredState=${3#*=} action=${4#*=}
	sleep ${sleep}
	until [[ $(get_state ${objtype} ${name}) == ${desiredState} ]]; do
		quit_if_rhvm_pingcheck_fails
		if (( count++ == maxcount )); then
			echo "  EXCEPTION: Something went wrong because ${objtype} still hasn't reached ${desiredState} state after $((sleep*maxcount)) seconds!"
			return 1
		fi
		echo "  Still waiting for ${objtype^^} ..."
		if [[ ${action} ]]; then
			ovirt-shell -E "action ${objtype} ${name} ${action}" &>/dev/null || :
		fi
		sleep ${sleep}
	done
	echo "  ✔ DONE"
}

shutdown_vm() {
	local vmName=${1} hostid hostid_name
	echo "Checking state of ${vmName} VM"
	if [[ $(get_state vm ${vmName}) == down ]]; then
		echo "  ✔ VM already down"
		return
	fi
	if ! i_am_rhvm && [[ -z ${MANAGE_VMS} ]]; then
		hostid=$(ovirt-shell -E "show vm ${vmName}" | awk '$1=="host-id" {print $3}')
		hostid_name=$(ovirt-shell -E "show host ${hostid}" | awk '$1=="name" {print $3}')
		if [[ ${hostid_name} != $(hostname) ]]; then
			echo "  ✔ VM not running on this host"
			return
		fi
	fi
	echo "Shutting down ${vmName} VM"
	ovirt-shell -E "action vm ${vmName} shutdown" &>/dev/null || :
	loop_wait vm ${vmName} state=down
}

enable_maintenance() {
	local rhvh=${1}
	echo "Checking state of ${rhvh} host"
	if [[ $(get_state host ${rhvh}) == maintenance ]]; then
		echo "  ✔ Host already in maintenance mode"
		return
	fi
	echo "Putting ${rhvh} host into maintenance mode"
	ovirt-shell -E "action host ${rhvh} deactivate" &>/dev/null || :
	loop_wait host ${rhvh} state=maintenance action=deactivate
}

activate_rhvh() {
	local rhvh=${1}
	echo "Checking state of ${rhvh} host"
	if [[ $(get_state host ${rhvh}) == up ]]; then
		echo "  ✔ Host already up"
		return
	fi
	echo "Bringing ${rhvh} host out of maintenance mode"
	ovirt-shell -E "action host ${rhvh} activate" &>/dev/null || :
	loop_wait host ${rhvh} state=up action=activate
}

wait_for_datacenter() {
	local dc=${1}
	echo "Checking state of ${dc} datacenter"
	if [[ $(get_state datacenter ${dc}) == up ]]; then
		echo "  ✔ Datacenter already up"
		return
	fi
	echo "Waiting for ${dc} datacenter to come up"
	loop_wait datacenter ${dc} state=up
}

start_vm() {
	local vmName=${1}
	echo "Checking state of ${vmName} VM"
	if [[ $(get_state vm ${vmName}) == up ]]; then
		echo "  ✔ VM already up"
		return
	fi
	echo "Starting ${vmName} VM"
	ovirt-shell -E "action vm ${vmName} start" &>/dev/null || :
	loop_wait vm ${vmName} state=up action=start
}

get_vms() {
	local out vm vms=
	out=$(get_list vms) || return 1
	if [[ ${MANAGE_VMS} ]]; then
		for vm in ${MANAGE_VMS}; do
			if grep -qs "^${vm}$" <<<"${out}"; then
				vms+="${vm} "
			else
				echo "Unknown VM '${vm}'" >&2
				exit 1
			fi
		done
		# Return failure if none of the specified VMs exist
		[[ ${vms} ]] && echo "${vms}" || return 1
	else
		echo "${out}"
	fi
}

get_hosts() {
	local host hosts=
	i_am_rhvm || : ${MANAGE_HOSTS:="$(hostname)"}
	if [[ ${MANAGE_HOSTS} ]]; then
		for host in ${MANAGE_HOSTS}; do
			if grep -qs "^${host}$" <<<"${hostListCache}"; then
				hosts+="${host} "
			else
				echo "Unknown RHV host '${host}'" >&2
			fi
		done
		# Return failure if none of the specified hosts exist
		[[ ${hosts} ]] && echo "${hosts}" || return 1
	else
		echo "${hostListCache}"
	fi
}

get_dcs() {
	local out dc dcs=
	out=$(get_list datacenters) || return 1
	if [[ ${MANAGE_DCS} ]]; then
		for dc in ${MANAGE_DCS}; do
			if grep -qs "^${dc}$" <<<"${out}"; then
				dcs+="${dc} "
			else
				echo "Unknown datacenter '${dc}'" >&2
			fi
		done
		echo "${dcs}"
	else
		echo "${out}"
	fi
}

activate() {
	wait_for_api_server
	[[ ${daemonMode} ]] && rguard -1
	rewrite_ovirtshell_cfg
	for host in $(get_hosts); do
		activate_rhvh ${host}
	done
	for dc in $(get_dcs); do
		wait_for_datacenter ${dc}
	done
	for vm in $(get_vms); do
		start_vm ${vm}
	done
	echo "✔ DONE ACTIVATING!"
}

deactivate() {
	quit_if_rhvm_pingcheck_fails
	rewrite_ovirtshell_cfg
	for vm in $(get_vms); do
		shutdown_vm ${vm}
	done
	for host in $(get_hosts); do
		enable_maintenance ${host}
	done
	if [[ ${daemonMode} ]] && i_am_rhvm; then
		echo "Sleeping 90s to give hosts a head-start"
		sleep 90
	fi
	echo "✔ DONE DEACTIVATING!"
	[[ ${daemonMode} ]] && rguard -0
}

print_help() {
	cat >&2 <<-EOF
		Usage: ${0##*/} activate|deactivate|daemon
		Automatically put RHV hosts into maintenance mode for graceful shutdowns
		Automatically re-activate RHV hosts from maintenance mode for easy startups
		
		activate:
		  1) From a RHV host, activate only that host.
		       [Or hosts listed space-separated in MANAGE_HOSTS environment variable]
		     From RHVM or some other machine, activate all hosts.
		       [Or hosts in MANAGE_HOSTS env var]
		  2) Wait for all datacenters.
		       [Or datacenters in MANAGE_DCS env var]
		  3) Start all VMs.
		       [Or VMs in MANAGE_VMS env var]
		  
		deactivate:
		  1) From a RHV host, gracefully shutdown only VMs running on that host.
		       [Or VMs in MANAGE_VMS]
		     From RHVM or some other machine, gracefully shutdown all VMs.
		       [Or VMs in MANAGE_VMS]
		  2) From a RHV host, put only that host into maintenance mode.
		       [Or hosts in MANAGE_HOSTS]
		     From RHVM or some other machine, put all hosts into maintenance mode.
		       [Or hosts in MANAGE_HOSTS]
		
		daemon:
		  1) Run "rguard -1" cmd to configure systemd to disable shutdown/reboot.
		  2) Run "activate" [described above].
		  3) Stay resident, waiting for systemd-logind to report "Power key pressed"
		     journal event [as triggered by an ACPI shutdown].
		  4) Run "deactivate" [described above].
		  5) Run "rguard -0" cmd to unblock shutdown/reboot.
		  
		  The daemon mode requires reboot-guard (https://github.com/ryran/reboot-guard)
		  to block and unblock shutdown, so ensure that is installed. Daemon mode is
		  also meant to be run from a service manager like systemd. Take a look at
		  /lib/systemd/system/${0##*/}.service & /etc/sysconfig/${0##*/}.
		
		SETUP / ENVIRONMENT VARIABLES:
		  * Set RHVM variable to FQDN of the RHVM; default: "rhvm.\$(dnsdomainname)"
		  * Set RHVM_USER variable as desired; default: "admin@internal"
		  * Set RHVM_USER_PASSWORD variable or save password to: ~/.rhvm.passwd
		  * To keep activate/deactivate from operating on any VMs, set: MANAGE_VMS=" "
		    The same applies to the MANAGE_HOSTS and MANAGE_DCS variables.
		
		Version info: ${version:2}
		See <https://github.com/ryran/rhv-manage-hosts> to report issues or contribute
	EOF
	exit 1
}

main() {
	case ${1} in
		activate|deactivate)
			get_rhvm_user_password
			${1}
			;;
		daemon)
			get_rhvm_user_password
			if ! journalctl -u systemd-logind -n1 >/dev/null; then
				echo "Error querying journal (perms?); aborting daemon activate"
				exit 1
			fi
			daemonMode=1
			trap 'echo Deactivating due to receipt of SIGINT/SIGTERM; deactivate' INT TERM
			activate
			echo "Waiting for systemd-logind to report 'Power key pressed' event ..."
			journalctl -fu systemd-logind | grep -q "Power key pressed"
			echo "  ✔ Power key pressed"
			deactivate
			;;
		*)
			print_help
	esac
}

main ${@}
exit ${?}
